
#!/usr/bin/env python3
"""
AI Assistant LLM Agent Server
–°–µ—Ä–≤–µ—Ä —Å –ò–ò-–∞–≥–µ–Ω—Ç–æ–º –¥–ª—è Chrome Extension AI Assistant
"""

import asyncio
import json
import logging
import os
import uuid
from datetime import datetime
from typing import Dict, Any, Optional, List
from dataclasses import dataclass, asdict

import uvicorn
from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect, Depends, Header
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class QueryRequest(BaseModel):
    query: str = Field(..., description="–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    context: Dict[str, Any] = Field(default_factory=dict, description="–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞")
    mcpEnabled: bool = Field(default=False, description="–í–∫–ª—é—á–µ–Ω—ã –ª–∏ MCP —Å–µ—Ä–≤–µ—Ä—ã")
    requestId: Optional[str] = Field(default=None, description="ID –∑–∞–ø—Ä–æ—Å–∞")

class QueryResponse(BaseModel):
    response: str = Field(..., description="–û—Ç–≤–µ—Ç –ò–ò")
    requestId: Optional[str] = Field(default=None, description="ID –∑–∞–ø—Ä–æ—Å–∞")
    mcpUsed: bool = Field(default=False, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ª–∏ MCP —Å–µ—Ä–≤–µ—Ä—ã")
    timestamp: datetime = Field(default_factory=datetime.now)

class MCPCommandRequest(BaseModel):
    action: str = Field(..., description="–î–µ–π—Å—Ç–≤–∏–µ MCP")
    command: str = Field(..., description="–ö–æ–º–∞–Ω–¥–∞ MCP")
    params: Dict[str, Any] = Field(default_factory=dict, description="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã")

class ServerStatus(BaseModel):
    name: str = "AI Assistant LLM Agent"
    version: str = "1.0.0"
    status: str = "running"
    mcpServers: List[str] = Field(default_factory=list)
    connections: int = 0

@dataclass
class ConnectionInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    id: str
    websocket: WebSocket
    connected_at: datetime
    last_activity: datetime

class LLMAgent:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å LLM-–∞–≥–µ–Ω—Ç–∞"""

    def __init__(self):
        self.name = "AI Assistant Agent"
        self.version = "1.0.0"
        self.mcp_enabled = True
        self.connections: Dict[str, ConnectionInfo] = {}

    async def process_query(self, request: QueryRequest) -> QueryResponse:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º LLM
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            response_text = await self._generate_response(request.query, request.context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP —Å–µ—Ä–≤–µ—Ä—ã
            mcp_used = False
            if request.mcpEnabled:
                mcp_response = await self._handle_mcp_request(request)
                if mcp_response:
                    response_text += "\n\n" + mcp_response
                    mcp_used = True

            return QueryResponse(
                response=response_text,
                requestId=request.requestId,
                mcpUsed=mcp_used
            )

        except Exception as e:
            logger.error(f"Error processing query: {e}")
            return QueryResponse(
                response=f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
                requestId=request.requestId,
                mcpUsed=False
            )

    async def _generate_response(self, query: str, context: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ OpenAI API, Anthropic API, –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        query_lower = query.lower()

        if "–∞–Ω–∞–ª–∏–∑" in query_lower or "–∞–Ω–∞–ª–∏–∑" in query_lower:
            return await self._analyze_page(context)
        elif "—Å—É–º–º–∏—Ä" in query_lower or "–∫—Ä–∞—Ç–∫–æ–µ" in query_lower:
            return await self._summarize_content(context)
        elif "–∏–∑–≤–ª–µ–∫" in query_lower or "–¥–∞–Ω–Ω—ã–µ" in query_lower:
            return await self._extract_data(context)
        else:
            return await self._general_response(query, context)

    async def _analyze_page(self, context: Dict[str, Any]) -> str:
        """–ê–Ω–∞–ª–∏–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        page_data = context.get('pageData', {})
        title = page_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
        url = context.get('url', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π URL')

        response = f"üìÑ **–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}**\n\n"
        response += f"üîó URL: {url}\n\n"

        if 'headings' in page_data:
            headings = page_data['headings'][:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            response += "üìã **–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**\n"
            for heading in headings:
                response += f"‚Ä¢ {heading['text']}\n"
            response += "\n"

        if 'metaDescription' in page_data and page_data['metaDescription']:
            response += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {page_data['metaDescription']}\n\n"

        response += "‚úÖ **–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:** –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

        return response

    async def _summarize_content(self, context: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è"""
        text_content = context.get('textContent', '')
        title = context.get('pageData', {}).get('title', '–ö–æ–Ω—Ç–µ–Ω—Ç')

        # –ü—Ä–æ—Å—Ç–æ–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = text_content.split('.')[:5]
        summary = '. '.join(sentence.strip() for sentence in sentences if sentence.strip())

        response = f"üìù **–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ: {title}**\n\n"
        response += f"{summary}...\n\n"
        response += "üí° **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ. –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é LLM –º–æ–¥–µ–ª—å."

        return response

    async def _extract_data(self, context: Dict[str, Any]) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        structured_data = context.get('structuredData', {})

        response = "üìä **–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n\n"

        # –ö–æ–Ω—Ç–∞–∫—Ç—ã
        contacts = structured_data.get('contacts', {})
        if contacts:
            response += "üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            if 'emails' in contacts:
                response += f"‚Ä¢ Email: {', '.join(contacts['emails'][:3])}\n"
            if 'phones' in contacts:
                response += f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω—ã: {', '.join(contacts['phones'][:3])}\n"
            response += "\n"

        # –¶–µ–Ω—ã
        prices = structured_data.get('prices', [])
        if prices:
            response += f"üí∞ **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã:** {', '.join(prices[:5])}\n\n"

        # –¢–∞–±–ª–∏—Ü—ã
        tables = structured_data.get('tables', [])
        if tables:
            response += f"üìã **–¢–∞–±–ª–∏—Ü—ã:** –ù–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏\n\n"

        # –°–ø–∏—Å–∫–∏
        lists = structured_data.get('lists', [])
        if lists:
            response += f"üìù **–°–ø–∏—Å–∫–∏:** –ù–∞–π–¥–µ–Ω–æ {len(lists)} —Å–ø–∏—Å–∫–æ–≤\n\n"

        if not any([contacts, prices, tables, lists]):
            response += "‚ÑπÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã."

        return response

    async def _general_response(self, query: str, context: Dict[str, Any]) -> str:
        """–û–±—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        response = f"ü§ñ **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:** {query}\n\n"
        response += "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —è –º–æ–≥—É —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –∏–∑–ª–æ–∂–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n\n"
        response += "–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é LLM –º–æ–¥–µ–ª—å (GPT-4, Claude, Llama –∏ —Ç.–¥.).\n\n"
        response += "üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        response += "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É\n"
        response += "‚Ä¢ –°—É–º–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        response += "‚Ä¢ –ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ\n"

        return response

    async def _handle_mcp_request(self, request: QueryRequest) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä—ã"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É

        if "playwright" in request.query.lower() or "–∞–≤—Ç–æ–º–∞—Ç–∏–∑" in request.query.lower():
            return "üé≠ **MCP Playwright:** –ì–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥—É."

        return None

    def add_connection(self, websocket: WebSocket) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        connection_id = str(uuid.uuid4())
        self.connections[connection_id] = ConnectionInfo(
            id=connection_id,
            websocket=websocket,
            connected_at=datetime.now(),
            last_activity=datetime.now()
        )
        logger.info(f"New connection: {connection_id}")
        return connection_id

    def remove_connection(self, connection_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if connection_id in self.connections:
            del self.connections[connection_id]
            logger.info(f"Connection removed: {connection_id}")

    def update_activity(self, connection_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if connection_id in self.connections:
            self.connections[connection_id].last_activity = datetime.now()

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="AI Assistant LLM Agent Server",
    description="–°–µ—Ä–≤–µ—Ä —Å –ò–ò-–∞–≥–µ–Ω—Ç–æ–º –¥–ª—è Chrome Extension",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
agent = LLMAgent()

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
security = HTTPBearer(auto_error=False)

async def get_api_key(credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É API –∫–ª—é—á–∞
    return credentials

# API Endpoints

@app.get("/api/status", response_model=ServerStatus)
async def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    return ServerStatus(
        mcpServers=["playwright-mcp", "file-system-mcp"],
        connections=len(agent.connections)
    )

@app.post("/api/query", response_model=QueryResponse)
async def process_query(
    request: QueryRequest,
    credentials: Optional[HTTPAuthorizationCredentials] = Depends(get_api_key)
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM"""
    return await agent.process_query(request)

@app.post("/api/mcp")
async def handle_mcp_command(
    request: MCPCommandRequest,
    credentials: Optional[HTTPAuthorizationCredentials] = Depends(get_api_key)
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ MCP"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏
        result = {
            "action": request.action,
            "command": request.command,
            "result": "MCP command executed successfully (demo)",
            "timestamp": datetime.now().isoformat()
        }

        logger.info(f"MCP command executed: {request.command}")
        return {"success": True, "data": result}

    except Exception as e:
        logger.error(f"MCP command error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# WebSocket endpoint
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await websocket.accept()
    connection_id = agent.add_connection(websocket)

    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            message = json.loads(data)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            agent.update_activity(connection_id)

            if message.get('type') == 'keepalive':
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ keepalive
                await websocket.send_text(json.dumps({
                    'type': 'pong',
                    'timestamp': datetime.now().isoformat()
                }))
            elif message.get('type') == 'query':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                request = QueryRequest(**message)
                response = await agent.process_query(request)

                await websocket.send_text(json.dumps({
                    'type': 'response',
                    'requestId': request.requestId,
                    'data': asdict(response)
                }))
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                request = QueryRequest(**message)
                response = await agent.process_query(request)

                response_data = {
                    'requestId': request.requestId,
                    'response': response.response,
                    'mcpUsed': response.mcpUsed,
                    'timestamp': response.timestamp.isoformat()
                }

                await websocket.send_text(json.dumps(response_data))

    except WebSocketDisconnect:
        logger.info(f"WebSocket disconnected: {connection_id}")
    except Exception as e:
        logger.error(f"WebSocket error: {e}")
    finally:
        agent.remove_connection(connection_id)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ endpoints

@app.get("/api/connections")
async def get_connections():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö"""
    connections_info = []
    for conn_id, conn in agent.connections.items():
        connections_info.append({
            'id': conn_id,
            'connected_at': conn.connected_at.isoformat(),
            'last_activity': conn.last_activity.isoformat()
        })

    return {
        'total': len(agent.connections),
        'connections': connections_info
    }

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return {
        "message": "AI Assistant LLM Agent Server",
        "version": "1.0.0",
        "status": "running",
        "docs": "/docs"
    }

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    import argparse

    parser = argparse.ArgumentParser(description="AI Assistant LLM Agent Server")
    parser.add_argument("--host", default="localhost", help="Host address")
    parser.add_argument("--port", type=int, default=8000, help="Port number")
    parser.add_argument("--debug", action="store_true", help="Enable debug mode")

    args = parser.parse_args()

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "server:app",
        host=args.host,
        port=args.port,
        reload=args.debug,
        log_level="info"
    )
