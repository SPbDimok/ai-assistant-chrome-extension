
// Content Script –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
class AIAssistantContent {
  constructor() {
    this.initialized = false;
    this.selectedElement = null;
    this.aiPanel = null;
    this.isAnalyzing = false;

    this.init();
  }

  init() {
    if (this.initialized) return;

    this.createAIPanel();
    this.attachEventListeners();
    this.initialized = true;

    console.log('AI Assistant Content Script initialized');
  }

  createAIPanel() {
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â—É—é –ø–∞–Ω–µ–ª—å AI Assistant
    this.aiPanel = document.createElement('div');
    this.aiPanel.id = 'ai-assistant-panel';
    this.aiPanel.innerHTML = `
      <div class="ai-panel-header">
        <span>ü§ñ AI Assistant</span>
        <button id="ai-panel-close">√ó</button>
      </div>
      <div class="ai-panel-content">
        <div id="ai-response-area">–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</div>
        <div class="ai-panel-controls">
          <button id="ai-analyze-page">–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
          <button id="ai-summarize">–°—É–º–º–∏—Ä–æ–≤–∞—Ç—å</button>
          <button id="ai-extract-data">–ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ</button>
        </div>
      </div>
    `;

    this.aiPanel.style.display = 'none';
    document.body.appendChild(this.aiPanel);
  }

  attachEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    document.addEventListener('click', (e) => {
      if (e.altKey && !e.target.closest('#ai-assistant-panel')) {
        e.preventDefault();
        e.stopPropagation();
        this.selectElement(e.target);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
    document.addEventListener('keydown', (e) => {
      if (e.ctrlKey && e.shiftKey && e.key === 'A') {
        e.preventDefault();
        this.togglePanel();
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–∞–Ω–µ–ª–∏
    document.addEventListener('click', (e) => {
      if (e.target.id === 'ai-panel-close') {
        this.hidePanel();
      } else if (e.target.id === 'ai-analyze-page') {
        this.analyzePage();
      } else if (e.target.id === 'ai-summarize') {
        this.summarizePage();
      } else if (e.target.id === 'ai-extract-data') {
        this.extractData();
      }
    });

    // –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background script
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
      this.handleMessage(request, sender, sendResponse);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    document.addEventListener('contextmenu', (e) => {
      this.selectedElement = e.target;
    });
  }

  selectElement(element) {
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    if (this.selectedElement) {
      this.selectedElement.classList.remove('ai-selected');
    }

    // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    this.selectedElement = element;
    element.classList.add('ai-selected');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Ä—è–¥–æ–º —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º
    this.showPanelNearElement(element);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    this.analyzeElement(element);
  }

  showPanelNearElement(element) {
    const rect = element.getBoundingClientRect();
    const panelWidth = 300;
    const panelHeight = 200;

    let left = rect.right + 10;
    let top = rect.top;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –ø–∞–Ω–µ–ª—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
    if (left + panelWidth > window.innerWidth) {
      left = rect.left - panelWidth - 10;
    }
    if (top + panelHeight > window.innerHeight) {
      top = window.innerHeight - panelHeight - 10;
    }

    this.aiPanel.style.left = left + 'px';
    this.aiPanel.style.top = (top + window.scrollY) + 'px';
    this.aiPanel.style.display = 'block';
  }

  async analyzeElement(element) {
    if (this.isAnalyzing) return;

    this.isAnalyzing = true;
    const responseArea = document.getElementById('ai-response-area');
    responseArea.innerHTML = 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç–ª–µ–º–µ–Ω—Ç...';

    try {
      const elementData = {
        tagName: element.tagName,
        text: element.textContent?.substring(0, 500) || '',
        className: element.className,
        id: element.id,
        attributes: this.getElementAttributes(element),
        position: element.getBoundingClientRect()
      };

      const response = await chrome.runtime.sendMessage({
        action: 'analyzeElement',
        elementData: elementData
      });

      if (response.success) {
        responseArea.innerHTML = this.formatResponse(response.data);
      } else {
        responseArea.innerHTML = '‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ' + response.error;
      }
    } catch (error) {
      responseArea.innerHTML = '‚ùå –û—à–∏–±–∫–∞: ' + error.message;
    } finally {
      this.isAnalyzing = false;
    }
  }

  getElementAttributes(element) {
    const attributes = {};
    for (let attr of element.attributes) {
      attributes[attr.name] = attr.value;
    }
    return attributes;
  }

  async analyzePage() {
    const responseArea = document.getElementById('ai-response-area');
    responseArea.innerHTML = 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...';

    try {
      const pageData = {
        title: document.title,
        url: window.location.href,
        metaDescription: document.querySelector('meta[name="description"]')?.content || '',
        headings: this.extractHeadings(),
        links: this.extractLinks(),
        forms: this.extractForms(),
        images: this.extractImages()
      };

      const response = await chrome.runtime.sendMessage({
        action: 'sendQuery',
        query: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—ë —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è',
        context: { pageData }
      });

      if (response.success) {
        responseArea.innerHTML = this.formatResponse(response.data);
      } else {
        responseArea.innerHTML = '‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ' + response.error;
      }
    } catch (error) {
      responseArea.innerHTML = '‚ùå –û—à–∏–±–∫–∞: ' + error.message;
    }
  }

  async summarizePage() {
    const responseArea = document.getElementById('ai-response-area');
    responseArea.innerHTML = 'üìù –°–æ–∑–¥–∞—é –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ...';

    try {
      const textContent = this.extractTextContent();

      const response = await chrome.runtime.sendMessage({
        action: 'sendQuery',
        query: '–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
        context: { textContent }
      });

      if (response.success) {
        responseArea.innerHTML = this.formatResponse(response.data);
      } else {
        responseArea.innerHTML = '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–ª–æ–∂–µ–Ω–∏—è: ' + response.error;
      }
    } catch (error) {
      responseArea.innerHTML = '‚ùå –û—à–∏–±–∫–∞: ' + error.message;
    }
  }

  async extractData() {
    const responseArea = document.getElementById('ai-response-area');
    responseArea.innerHTML = 'üìä –ò–∑–≤–ª–µ–∫–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...';

    try {
      const structuredData = {
        tables: this.extractTables(),
        lists: this.extractLists(),
        contacts: this.extractContacts(),
        prices: this.extractPrices()
      };

      const response = await chrome.runtime.sendMessage({
        action: 'sendQuery',
        query: '–ò–∑–≤–ª–µ–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        context: { structuredData }
      });

      if (response.success) {
        responseArea.innerHTML = this.formatResponse(response.data);
      } else {
        responseArea.innerHTML = '‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + response.error;
      }
    } catch (error) {
      responseArea.innerHTML = '‚ùå –û—à–∏–±–∫–∞: ' + error.message;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  extractHeadings() {
    const headings = [];
    document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(h => {
      headings.push({
        level: h.tagName,
        text: h.textContent.trim()
      });
    });
    return headings;
  }

  extractLinks() {
    const links = [];
    document.querySelectorAll('a[href]').forEach(a => {
      links.push({
        text: a.textContent.trim(),
        href: a.href
      });
    });
    return links.slice(0, 20); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  }

  extractForms() {
    const forms = [];
    document.querySelectorAll('form').forEach(form => {
      const inputs = [];
      form.querySelectorAll('input, select, textarea').forEach(input => {
        inputs.push({
          type: input.type || input.tagName.toLowerCase(),
          name: input.name,
          placeholder: input.placeholder
        });
      });
      forms.push({ inputs });
    });
    return forms;
  }

  extractImages() {
    const images = [];
    document.querySelectorAll('img').forEach(img => {
      images.push({
        src: img.src,
        alt: img.alt
      });
    });
    return images.slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  }

  extractTextContent() {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const content = document.body.innerText || document.body.textContent || '';
    return content.substring(0, 10000); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
  }

  extractTables() {
    const tables = [];
    document.querySelectorAll('table').forEach(table => {
      const rows = [];
      table.querySelectorAll('tr').forEach(tr => {
        const cells = [];
        tr.querySelectorAll('td, th').forEach(cell => {
          cells.push(cell.textContent.trim());
        });
        if (cells.length > 0) rows.push(cells);
      });
      if (rows.length > 0) tables.push(rows);
    });
    return tables;
  }

  extractLists() {
    const lists = [];
    document.querySelectorAll('ul, ol').forEach(list => {
      const items = [];
      list.querySelectorAll('li').forEach(li => {
        items.push(li.textContent.trim());
      });
      lists.push(items);
    });
    return lists;
  }

  extractContacts() {
    const text = document.body.textContent;
    const contacts = {};

    // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    const emails = text.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g) || [];
    const phones = text.match(/[+]?[0-9]{1,4}?[-\s]?\(?[0-9]{1,3}?\)?[-\s]?[0-9]{1,4}[-\s]?[0-9]{1,4}[-\s]?[0-9]{1,9}/g) || [];

    if (emails.length > 0) contacts.emails = emails.slice(0, 5);
    if (phones.length > 0) contacts.phones = phones.slice(0, 5);

    return contacts;
  }

  extractPrices() {
    const text = document.body.textContent;
    const prices = text.match(/[$‚Ç¨¬£¬•‚ÇΩ]\s?[0-9]+(?:[.,][0-9]{2})?|[0-9]+(?:[.,][0-9]{2})?\s?[$‚Ç¨¬£¬•‚ÇΩ]/g) || [];
    return prices.slice(0, 10);
  }

  formatResponse(data) {
    if (typeof data === 'string') {
      return data;
    }

    if (data.response) {
      return data.response;
    }

    return JSON.stringify(data, null, 2);
  }

  togglePanel() {
    if (this.aiPanel.style.display === 'none') {
      this.aiPanel.style.display = 'block';
      this.aiPanel.style.left = '50px';
      this.aiPanel.style.top = '50px';
    } else {
      this.hidePanel();
    }
  }

  hidePanel() {
    this.aiPanel.style.display = 'none';
    if (this.selectedElement) {
      this.selectedElement.classList.remove('ai-selected');
      this.selectedElement = null;
    }
  }

  handleMessage(request, sender, sendResponse) {
    switch (request.type) {
      case 'update':
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        console.log('Received update:', request.data);
        break;
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Content Script
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    new AIAssistantContent();
  });
} else {
  new AIAssistantContent();
}
